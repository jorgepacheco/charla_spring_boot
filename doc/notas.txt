NOTAS SPRING BOOT
=================

- Objetivo:

Spring Boot simplifica la creación de aplicaciones  y servicios Spring extendiendo el concepto de Runtime configurando por debajo el AppServer, Contextos de Spring, monitorización,… todo basado en una aproximación Convention-Over-Configuration.

Spring Boot simplifica la creación de aplicaciones  y servicios Spring listas para ejecutarse.

- Caracteristicas:

· Proveer una forma muy sencilla de arrancar desarrollos Spring

· Ofrecer funcionalidad out-of-the-box en función de la naturaleza del proyecto

. Proporciona 'starter' POM para simplificar la configuración de maven.

· Proporcionar una serie de características no funcionales comunes a los proyectos (por ejemplo, servidores embebidos, seguridad, indicadores, configuración externalizada)

· No necesitar generación código ni configuración XML


The primary goals of Spring Boot are:

To provide a radically faster and widely accessible 'getting started' experience for all Spring development
To be opinionated out of the box, but get out of the way quickly as requirements start to diverge from the defaults
To provide a range of non-functional features that are common to large classes of projects (e.g. embedded servers, security, metrics, health checks, externalized configuration)
Spring Boot does not generate code and there is absolutely no requirement for XML configuration.


-- Proporciona una linea de comandos Spring Boot CLI

	. Que se puede usar para crear rapidamente prototipos.
	. Permite ejecutar scripts de Groovy
	. No es necesario para trabajar con spring boot.


-- Primer Ejemplo

	. spring-boot-starter-parent ??
	. spring-boot-starter-web ??

	. Clase java Example
		- Anotaciones Spring MVC
		- @EnableAutoConfiguration : This annotation tells Spring Boot to “guess” how you will want to configure Spring, based on the jar dependencies that you have added. 
									Since spring-boot-starter-parent-web added Tomcat and Spring MVC, the auto-configuration will assume that you are developing a web application and setup Spring accordingly

		- Arrancar la aplicacion con mvn spring-boot:run

	. Generar un jar autoejecutable listo

		- Añadir: spring-boot-maven-plugin


====================
- Usando Spring BOOT
====================

- Permite el uso con Maven / Gradle

- spring-boot-starter-parent (aunque no es necesario)

	. Java 1.6 as the default compiler level.
	. UTF-8 source encoding.
	. A Dependency Management section, allowing you to omit <version> tags for common dependencies, inherited from the spring-boot-dependencies POM.
	. Sensible resource filtering.
	. Sensible plugin configuration (exec plugin, surefire, Git commit ID, shade).

	* Puedes omitir su uso, aunque puedes usar su gestion de dependencias

			<dependencyManagement>
		     <dependencies>
		        <dependency>
		            <!-- Import dependency management from Spring Boot -->
		            <groupId>org.springframework.boot</groupId>
		            <artifactId>spring-boot-dependencies</artifactId>
		            <version>1.2.0.BUILD-SNAPSHOT</version>
		            <type>pom</type>
		            <scope>import</scope>
		        </dependency>
		    </dependencies>
		</dependencyManagement>

	* Cambiar la versión de JAVA añadiendo:

		<properties>
		    <java.version>1.8</java.version>
		</properties>

- spring-boot-maven-plugin

	. Para añadir el empaquetado en un jar autoejecutable

============
Starter POMs
============

- Agrupaciones de dependencias clasificadas por tipos que evita tener que configurarlas manualmente.

- spring-boot-starter* --> Mirar starters.txt

	. Gestion de dependencias por fncionaslidad
	. Pase a PRO
	. Exclusión de caracteristicas


=============
CONFIGURACION
=============

- Favorece la configuración basada en Java (aunque puede ser llamada desde un XML)

- Ej:

@Configuration
@EnableAutoConfiguration
@ComponentScan
public class Application {

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}


- No es necesario tener toda la configuración en la misma clase

	. Puede importarse otras clase de configuración @Configuration --> @Import
	. Se pueden cargar archivos xml de configuracion --> @ImportResource


- AUTOCONFIGURACION --> @EnableAutoConfiguration

	. Spring Boot intenta automaticamente configurar la aplicación basandose en las dependendencias jar que se han añadido.
		Por Ej si HSQLDB esta en tu claspath y no has configurado manualmente ninguna datasource, autoconfigurara una bd en memoria

	. No invasivo, en cualquier momento podemos añadir configuración manual para sustituir partes específicas de la configuración automática. Por ejemplo, si añadimos manualmente  DataSource, el soporte de a BBDD embebidas no se tendra en cuenta.

	. Si al ejecutar ponemos --debug se podra ver un informe de la auto-configuración

	. Se pueden desactivar partes de la autoconfiguracion

		@Configuration
		@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})
		public class MyConfiguration {
		}


	=========
	EJECUCION
	=========

	- Desde un IDE como un aplicación java normal

	- Desde un jar 

			$ java -jar target/myproject-0.0.1-SNAPSHOT.jar

			$ java -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=8000,suspend=n -jar target/myproject-0.0.1-SNAPSHOT.jar

	- Maven 

			$ mvn spring-boot:run

===============
 EMPAQUETADO
===============

Executable jars can be used for production deployment. As they are self contained, they are also ideally suited for cloud-based deployment.

For additional “production ready” features, such as health, auditing and metric REST or JMX end-points; consider adding spring-boot-actuator










	manualmente
	192.168.168.54
	255.255.0.0
	192.168.168.2
	Automaticamente

		
